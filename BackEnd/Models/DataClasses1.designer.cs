#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BackEnd.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="validations")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertExercise(Exercise instance);
    partial void UpdateExercise(Exercise instance);
    partial void DeleteExercise(Exercise instance);
    partial void InsertModule(Module instance);
    partial void UpdateModule(Module instance);
    partial void DeleteModule(Module instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["validationsConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Exercise> Exercises
		{
			get
			{
				return this.GetTable<Exercise>();
			}
		}
		
		public System.Data.Linq.Table<Module> Modules
		{
			get
			{
				return this.GetTable<Module>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Exercise")]
	public partial class Exercise : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _exerciseId;
		
		private int _moduleId;
		
		private string _exerciseName;
		
		private string _exerciseDescription;
		
		private string _exerciseCategory;
		
		private string _exerciseStatus;
		
		private System.Nullable<int> _exercisePosition;
		
		private EntitySet<Task> _Tasks;
		
		private EntityRef<Module> _Module;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnexerciseIdChanging(int value);
    partial void OnexerciseIdChanged();
    partial void OnmoduleIdChanging(int value);
    partial void OnmoduleIdChanged();
    partial void OnexerciseNameChanging(string value);
    partial void OnexerciseNameChanged();
    partial void OnexerciseDescriptionChanging(string value);
    partial void OnexerciseDescriptionChanged();
    partial void OnexerciseCategoryChanging(string value);
    partial void OnexerciseCategoryChanged();
    partial void OnexerciseStatusChanging(string value);
    partial void OnexerciseStatusChanged();
    partial void OnexercisePositionChanging(System.Nullable<int> value);
    partial void OnexercisePositionChanged();
    #endregion
		
		public Exercise()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._Module = default(EntityRef<Module>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exerciseId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int exerciseId
		{
			get
			{
				return this._exerciseId;
			}
			set
			{
				if ((this._exerciseId != value))
				{
					this.OnexerciseIdChanging(value);
					this.SendPropertyChanging();
					this._exerciseId = value;
					this.SendPropertyChanged("exerciseId");
					this.OnexerciseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_moduleId", DbType="Int NOT NULL")]
		public int moduleId
		{
			get
			{
				return this._moduleId;
			}
			set
			{
				if ((this._moduleId != value))
				{
					if (this._Module.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmoduleIdChanging(value);
					this.SendPropertyChanging();
					this._moduleId = value;
					this.SendPropertyChanged("moduleId");
					this.OnmoduleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exerciseName", DbType="NVarChar(20)")]
		public string exerciseName
		{
			get
			{
				return this._exerciseName;
			}
			set
			{
				if ((this._exerciseName != value))
				{
					this.OnexerciseNameChanging(value);
					this.SendPropertyChanging();
					this._exerciseName = value;
					this.SendPropertyChanged("exerciseName");
					this.OnexerciseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exerciseDescription", DbType="NVarChar(MAX)")]
		public string exerciseDescription
		{
			get
			{
				return this._exerciseDescription;
			}
			set
			{
				if ((this._exerciseDescription != value))
				{
					this.OnexerciseDescriptionChanging(value);
					this.SendPropertyChanging();
					this._exerciseDescription = value;
					this.SendPropertyChanged("exerciseDescription");
					this.OnexerciseDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exerciseCategory", DbType="NVarChar(30)")]
		public string exerciseCategory
		{
			get
			{
				return this._exerciseCategory;
			}
			set
			{
				if ((this._exerciseCategory != value))
				{
					this.OnexerciseCategoryChanging(value);
					this.SendPropertyChanging();
					this._exerciseCategory = value;
					this.SendPropertyChanged("exerciseCategory");
					this.OnexerciseCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exerciseStatus", DbType="NVarChar(5)")]
		public string exerciseStatus
		{
			get
			{
				return this._exerciseStatus;
			}
			set
			{
				if ((this._exerciseStatus != value))
				{
					this.OnexerciseStatusChanging(value);
					this.SendPropertyChanging();
					this._exerciseStatus = value;
					this.SendPropertyChanged("exerciseStatus");
					this.OnexerciseStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exercisePosition", DbType="Int")]
		public System.Nullable<int> exercisePosition
		{
			get
			{
				return this._exercisePosition;
			}
			set
			{
				if ((this._exercisePosition != value))
				{
					this.OnexercisePositionChanging(value);
					this.SendPropertyChanging();
					this._exercisePosition = value;
					this.SendPropertyChanged("exercisePosition");
					this.OnexercisePositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exercise_Task", Storage="_Tasks", ThisKey="exerciseId", OtherKey="exerciseId")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_Exercise", Storage="_Module", ThisKey="moduleId", OtherKey="moduleId", IsForeignKey=true)]
		public Module Module
		{
			get
			{
				return this._Module.Entity;
			}
			set
			{
				Module previousValue = this._Module.Entity;
				if (((previousValue != value) 
							|| (this._Module.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Module.Entity = null;
						previousValue.Exercises.Remove(this);
					}
					this._Module.Entity = value;
					if ((value != null))
					{
						value.Exercises.Add(this);
						this._moduleId = value.moduleId;
					}
					else
					{
						this._moduleId = default(int);
					}
					this.SendPropertyChanged("Module");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Exercise = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Exercise = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Module")]
	public partial class Module : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _moduleId;
		
		private string _moduleName;
		
		private string _moduleDescription;
		
		private string _moduleStatus;
		
		private System.Nullable<int> _modulePosition;
		
		private EntitySet<Exercise> _Exercises;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmoduleIdChanging(int value);
    partial void OnmoduleIdChanged();
    partial void OnmoduleNameChanging(string value);
    partial void OnmoduleNameChanged();
    partial void OnmoduleDescriptionChanging(string value);
    partial void OnmoduleDescriptionChanged();
    partial void OnmoduleStatusChanging(string value);
    partial void OnmoduleStatusChanged();
    partial void OnmodulePositionChanging(System.Nullable<int> value);
    partial void OnmodulePositionChanged();
    #endregion
		
		public Module()
		{
			this._Exercises = new EntitySet<Exercise>(new Action<Exercise>(this.attach_Exercises), new Action<Exercise>(this.detach_Exercises));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_moduleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int moduleId
		{
			get
			{
				return this._moduleId;
			}
			set
			{
				if ((this._moduleId != value))
				{
					this.OnmoduleIdChanging(value);
					this.SendPropertyChanging();
					this._moduleId = value;
					this.SendPropertyChanged("moduleId");
					this.OnmoduleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_moduleName", DbType="NVarChar(20)")]
		public string moduleName
		{
			get
			{
				return this._moduleName;
			}
			set
			{
				if ((this._moduleName != value))
				{
					this.OnmoduleNameChanging(value);
					this.SendPropertyChanging();
					this._moduleName = value;
					this.SendPropertyChanged("moduleName");
					this.OnmoduleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_moduleDescription", DbType="NVarChar(MAX)")]
		public string moduleDescription
		{
			get
			{
				return this._moduleDescription;
			}
			set
			{
				if ((this._moduleDescription != value))
				{
					this.OnmoduleDescriptionChanging(value);
					this.SendPropertyChanging();
					this._moduleDescription = value;
					this.SendPropertyChanged("moduleDescription");
					this.OnmoduleDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_moduleStatus", DbType="NVarChar(5)")]
		public string moduleStatus
		{
			get
			{
				return this._moduleStatus;
			}
			set
			{
				if ((this._moduleStatus != value))
				{
					this.OnmoduleStatusChanging(value);
					this.SendPropertyChanging();
					this._moduleStatus = value;
					this.SendPropertyChanged("moduleStatus");
					this.OnmoduleStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modulePosition", DbType="Int")]
		public System.Nullable<int> modulePosition
		{
			get
			{
				return this._modulePosition;
			}
			set
			{
				if ((this._modulePosition != value))
				{
					this.OnmodulePositionChanging(value);
					this.SendPropertyChanging();
					this._modulePosition = value;
					this.SendPropertyChanged("modulePosition");
					this.OnmodulePositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_Exercise", Storage="_Exercises", ThisKey="moduleId", OtherKey="moduleId")]
		public EntitySet<Exercise> Exercises
		{
			get
			{
				return this._Exercises;
			}
			set
			{
				this._Exercises.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Exercises(Exercise entity)
		{
			this.SendPropertyChanging();
			entity.Module = this;
		}
		
		private void detach_Exercises(Exercise entity)
		{
			this.SendPropertyChanging();
			entity.Module = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _taskId;
		
		private int _exerciseId;
		
		private string _taskName;
		
		private string _taskDescription;
		
		private string _taskStatus;
		
		private System.Nullable<int> _taskPosition;
		
		private EntityRef<Exercise> _Exercise;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntaskIdChanging(int value);
    partial void OntaskIdChanged();
    partial void OnexerciseIdChanging(int value);
    partial void OnexerciseIdChanged();
    partial void OntaskNameChanging(string value);
    partial void OntaskNameChanged();
    partial void OntaskDescriptionChanging(string value);
    partial void OntaskDescriptionChanged();
    partial void OntaskStatusChanging(string value);
    partial void OntaskStatusChanged();
    partial void OntaskPositionChanging(System.Nullable<int> value);
    partial void OntaskPositionChanged();
    #endregion
		
		public Task()
		{
			this._Exercise = default(EntityRef<Exercise>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int taskId
		{
			get
			{
				return this._taskId;
			}
			set
			{
				if ((this._taskId != value))
				{
					this.OntaskIdChanging(value);
					this.SendPropertyChanging();
					this._taskId = value;
					this.SendPropertyChanged("taskId");
					this.OntaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exerciseId", DbType="Int NOT NULL")]
		public int exerciseId
		{
			get
			{
				return this._exerciseId;
			}
			set
			{
				if ((this._exerciseId != value))
				{
					if (this._Exercise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnexerciseIdChanging(value);
					this.SendPropertyChanging();
					this._exerciseId = value;
					this.SendPropertyChanged("exerciseId");
					this.OnexerciseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskName", DbType="NVarChar(20)")]
		public string taskName
		{
			get
			{
				return this._taskName;
			}
			set
			{
				if ((this._taskName != value))
				{
					this.OntaskNameChanging(value);
					this.SendPropertyChanging();
					this._taskName = value;
					this.SendPropertyChanged("taskName");
					this.OntaskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskDescription", DbType="NVarChar(MAX)")]
		public string taskDescription
		{
			get
			{
				return this._taskDescription;
			}
			set
			{
				if ((this._taskDescription != value))
				{
					this.OntaskDescriptionChanging(value);
					this.SendPropertyChanging();
					this._taskDescription = value;
					this.SendPropertyChanged("taskDescription");
					this.OntaskDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskStatus", DbType="NVarChar(5)")]
		public string taskStatus
		{
			get
			{
				return this._taskStatus;
			}
			set
			{
				if ((this._taskStatus != value))
				{
					this.OntaskStatusChanging(value);
					this.SendPropertyChanging();
					this._taskStatus = value;
					this.SendPropertyChanged("taskStatus");
					this.OntaskStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskPosition", DbType="Int")]
		public System.Nullable<int> taskPosition
		{
			get
			{
				return this._taskPosition;
			}
			set
			{
				if ((this._taskPosition != value))
				{
					this.OntaskPositionChanging(value);
					this.SendPropertyChanging();
					this._taskPosition = value;
					this.SendPropertyChanged("taskPosition");
					this.OntaskPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exercise_Task", Storage="_Exercise", ThisKey="exerciseId", OtherKey="exerciseId", IsForeignKey=true)]
		public Exercise Exercise
		{
			get
			{
				return this._Exercise.Entity;
			}
			set
			{
				Exercise previousValue = this._Exercise.Entity;
				if (((previousValue != value) 
							|| (this._Exercise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exercise.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Exercise.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._exerciseId = value.exerciseId;
					}
					else
					{
						this._exerciseId = default(int);
					}
					this.SendPropertyChanged("Exercise");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
